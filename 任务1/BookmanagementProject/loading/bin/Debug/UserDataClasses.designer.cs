#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4200
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace loading
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="LibraryAB")]
	public partial class UserDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserData(UserData instance);
    partial void UpdateUserData(UserData instance);
    partial void DeleteUserData(UserData instance);
    partial void InsertBookType(BookType instance);
    partial void UpdateBookType(BookType instance);
    partial void DeleteBookType(BookType instance);
    partial void InsertPress(Press instance);
    partial void UpdatePress(Press instance);
    partial void DeletePress(Press instance);
    partial void InsertBookshelf(Bookshelf instance);
    partial void UpdateBookshelf(Bookshelf instance);
    partial void DeleteBookshelf(Bookshelf instance);
    partial void InsertCD(CD instance);
    partial void UpdateCD(CD instance);
    partial void DeleteCD(CD instance);
    partial void InsertHandbook(Handbook instance);
    partial void UpdateHandbook(Handbook instance);
    partial void DeleteHandbook(Handbook instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBookBorrow(BookBorrow instance);
    partial void UpdateBookBorrow(BookBorrow instance);
    partial void DeleteBookBorrow(BookBorrow instance);
    partial void InsertUserFreeze(UserFreeze instance);
    partial void UpdateUserFreeze(UserFreeze instance);
    partial void DeleteUserFreeze(UserFreeze instance);
    #endregion
		
		public UserDataContext() : 
				base(global::loading.Properties.Settings.Default.LibraryABConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UserDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserData> UserData
		{
			get
			{
				return this.GetTable<UserData>();
			}
		}
		
		public System.Data.Linq.Table<BookType> BookType
		{
			get
			{
				return this.GetTable<BookType>();
			}
		}
		
		public System.Data.Linq.Table<Press> Press
		{
			get
			{
				return this.GetTable<Press>();
			}
		}
		
		public System.Data.Linq.Table<Bookshelf> Bookshelf
		{
			get
			{
				return this.GetTable<Bookshelf>();
			}
		}
		
		public System.Data.Linq.Table<CD> CD
		{
			get
			{
				return this.GetTable<CD>();
			}
		}
		
		public System.Data.Linq.Table<Handbook> Handbook
		{
			get
			{
				return this.GetTable<Handbook>();
			}
		}
		
		public System.Data.Linq.Table<Book> Book
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BookBorrow> BookBorrow
		{
			get
			{
				return this.GetTable<BookBorrow>();
			}
		}
		
		public System.Data.Linq.Table<UserFreeze> UserFreeze
		{
			get
			{
				return this.GetTable<UserFreeze>();
			}
		}
	}
	
	[Table(Name="dbo.UserData")]
	public partial class UserData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Email;
		
		private string _EmailPassword;
		
		private string _Authority;
		
		private string _Sex;
		
		private string _Unit;
		
		private string _Tel;
		
		private string _Address;
		
		private System.Data.Linq.Binary _Photo;
		
		private System.Nullable<System.DateTime> _CardCreateDate;
		
		private EntitySet<BookBorrow> _BookBorrow;
		
		private EntitySet<UserFreeze> _UserFreeze;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailPasswordChanging(string value);
    partial void OnEmailPasswordChanged();
    partial void OnAuthorityChanging(string value);
    partial void OnAuthorityChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnCardCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCardCreateDateChanged();
    #endregion
		
		public UserData()
		{
			this._BookBorrow = new EntitySet<BookBorrow>(new Action<BookBorrow>(this.attach_BookBorrow), new Action<BookBorrow>(this.detach_BookBorrow));
			this._UserFreeze = new EntitySet<UserFreeze>(new Action<UserFreeze>(this.attach_UserFreeze), new Action<UserFreeze>(this.detach_UserFreeze));
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_EmailPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailPassword
		{
			get
			{
				return this._EmailPassword;
			}
			set
			{
				if ((this._EmailPassword != value))
				{
					this.OnEmailPasswordChanging(value);
					this.SendPropertyChanging();
					this._EmailPassword = value;
					this.SendPropertyChanged("EmailPassword");
					this.OnEmailPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Authority", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Authority
		{
			get
			{
				return this._Authority;
			}
			set
			{
				if ((this._Authority != value))
				{
					this.OnAuthorityChanging(value);
					this.SendPropertyChanging();
					this._Authority = value;
					this.SendPropertyChanged("Authority");
					this.OnAuthorityChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="NVarChar(50)")]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="NVarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_Tel", DbType="NVarChar(50)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_CardCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CardCreateDate
		{
			get
			{
				return this._CardCreateDate;
			}
			set
			{
				if ((this._CardCreateDate != value))
				{
					this.OnCardCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CardCreateDate = value;
					this.SendPropertyChanged("CardCreateDate");
					this.OnCardCreateDateChanged();
				}
			}
		}
		
		[Association(Name="UserData_BookBorrow", Storage="_BookBorrow", ThisKey="UserID,UserName", OtherKey="UserID,UserName")]
		public EntitySet<BookBorrow> BookBorrow
		{
			get
			{
				return this._BookBorrow;
			}
			set
			{
				this._BookBorrow.Assign(value);
			}
		}
		
		[Association(Name="UserData_UserFreeze", Storage="_UserFreeze", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserFreeze> UserFreeze
		{
			get
			{
				return this._UserFreeze;
			}
			set
			{
				this._UserFreeze.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookBorrow(BookBorrow entity)
		{
			this.SendPropertyChanging();
			entity.UserData = this;
		}
		
		private void detach_BookBorrow(BookBorrow entity)
		{
			this.SendPropertyChanging();
			entity.UserData = null;
		}
		
		private void attach_UserFreeze(UserFreeze entity)
		{
			this.SendPropertyChanging();
			entity.UserData = this;
		}
		
		private void detach_UserFreeze(UserFreeze entity)
		{
			this.SendPropertyChanging();
			entity.UserData = null;
		}
	}
	
	[Table(Name="dbo.BookType")]
	public partial class BookType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookTypeID;
		
		private string _BookTypeName;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookTypeIDChanging(int value);
    partial void OnBookTypeIDChanged();
    partial void OnBookTypeNameChanging(string value);
    partial void OnBookTypeNameChanged();
    #endregion
		
		public BookType()
		{
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[Column(Storage="_BookTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookTypeID
		{
			get
			{
				return this._BookTypeID;
			}
			set
			{
				if ((this._BookTypeID != value))
				{
					this.OnBookTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BookTypeID = value;
					this.SendPropertyChanged("BookTypeID");
					this.OnBookTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BookTypeName", DbType="NVarChar(50)")]
		public string BookTypeName
		{
			get
			{
				return this._BookTypeName;
			}
			set
			{
				if ((this._BookTypeName != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BookTypeName = value;
					this.SendPropertyChanged("BookTypeName");
					this.OnBookTypeNameChanged();
				}
			}
		}
		
		[Association(Name="Book_BookType", Storage="_Book", ThisKey="BookTypeName", OtherKey="BookType", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookType1.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookType1.Add(this);
						this._BookTypeName = value.BookType;
					}
					else
					{
						this._BookTypeName = default(string);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Press")]
	public partial class Press : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PressID;
		
		private string _PressName;
		
		private string _PressTel;
		
		private string _PressAddress;
		
		private string _PressZipCode;
		
		private string _PressWebsite;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPressIDChanging(int value);
    partial void OnPressIDChanged();
    partial void OnPressNameChanging(string value);
    partial void OnPressNameChanged();
    partial void OnPressTelChanging(string value);
    partial void OnPressTelChanged();
    partial void OnPressAddressChanging(string value);
    partial void OnPressAddressChanged();
    partial void OnPressZipCodeChanging(string value);
    partial void OnPressZipCodeChanged();
    partial void OnPressWebsiteChanging(string value);
    partial void OnPressWebsiteChanged();
    #endregion
		
		public Press()
		{
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[Column(Storage="_PressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PressID
		{
			get
			{
				return this._PressID;
			}
			set
			{
				if ((this._PressID != value))
				{
					this.OnPressIDChanging(value);
					this.SendPropertyChanging();
					this._PressID = value;
					this.SendPropertyChanged("PressID");
					this.OnPressIDChanged();
				}
			}
		}
		
		[Column(Storage="_PressName", DbType="NVarChar(50)")]
		public string PressName
		{
			get
			{
				return this._PressName;
			}
			set
			{
				if ((this._PressName != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPressNameChanging(value);
					this.SendPropertyChanging();
					this._PressName = value;
					this.SendPropertyChanged("PressName");
					this.OnPressNameChanged();
				}
			}
		}
		
		[Column(Storage="_PressTel", DbType="NVarChar(50)")]
		public string PressTel
		{
			get
			{
				return this._PressTel;
			}
			set
			{
				if ((this._PressTel != value))
				{
					this.OnPressTelChanging(value);
					this.SendPropertyChanging();
					this._PressTel = value;
					this.SendPropertyChanged("PressTel");
					this.OnPressTelChanged();
				}
			}
		}
		
		[Column(Storage="_PressAddress", DbType="NVarChar(50)")]
		public string PressAddress
		{
			get
			{
				return this._PressAddress;
			}
			set
			{
				if ((this._PressAddress != value))
				{
					this.OnPressAddressChanging(value);
					this.SendPropertyChanging();
					this._PressAddress = value;
					this.SendPropertyChanged("PressAddress");
					this.OnPressAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PressZipCode", DbType="NVarChar(50)")]
		public string PressZipCode
		{
			get
			{
				return this._PressZipCode;
			}
			set
			{
				if ((this._PressZipCode != value))
				{
					this.OnPressZipCodeChanging(value);
					this.SendPropertyChanging();
					this._PressZipCode = value;
					this.SendPropertyChanged("PressZipCode");
					this.OnPressZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PressWebsite", DbType="NVarChar(50)")]
		public string PressWebsite
		{
			get
			{
				return this._PressWebsite;
			}
			set
			{
				if ((this._PressWebsite != value))
				{
					this.OnPressWebsiteChanging(value);
					this.SendPropertyChanging();
					this._PressWebsite = value;
					this.SendPropertyChanged("PressWebsite");
					this.OnPressWebsiteChanged();
				}
			}
		}
		
		[Association(Name="Book_Press", Storage="_Book", ThisKey="PressName", OtherKey="PressName", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Press.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Press.Add(this);
						this._PressName = value.PressName;
					}
					else
					{
						this._PressName = default(string);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Bookshelf")]
	public partial class Bookshelf : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookshelfID;
		
		private string _BookshelfName;
		
		private string _BookshelfPosition;
		
		private string _BookshelfNotes;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookshelfIDChanging(int value);
    partial void OnBookshelfIDChanged();
    partial void OnBookshelfNameChanging(string value);
    partial void OnBookshelfNameChanged();
    partial void OnBookshelfPositionChanging(string value);
    partial void OnBookshelfPositionChanged();
    partial void OnBookshelfNotesChanging(string value);
    partial void OnBookshelfNotesChanged();
    #endregion
		
		public Bookshelf()
		{
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[Column(Storage="_BookshelfID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookshelfID
		{
			get
			{
				return this._BookshelfID;
			}
			set
			{
				if ((this._BookshelfID != value))
				{
					this.OnBookshelfIDChanging(value);
					this.SendPropertyChanging();
					this._BookshelfID = value;
					this.SendPropertyChanged("BookshelfID");
					this.OnBookshelfIDChanged();
				}
			}
		}
		
		[Column(Storage="_BookshelfName", DbType="NVarChar(50)")]
		public string BookshelfName
		{
			get
			{
				return this._BookshelfName;
			}
			set
			{
				if ((this._BookshelfName != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookshelfNameChanging(value);
					this.SendPropertyChanging();
					this._BookshelfName = value;
					this.SendPropertyChanged("BookshelfName");
					this.OnBookshelfNameChanged();
				}
			}
		}
		
		[Column(Storage="_BookshelfPosition", DbType="NVarChar(50)")]
		public string BookshelfPosition
		{
			get
			{
				return this._BookshelfPosition;
			}
			set
			{
				if ((this._BookshelfPosition != value))
				{
					this.OnBookshelfPositionChanging(value);
					this.SendPropertyChanging();
					this._BookshelfPosition = value;
					this.SendPropertyChanged("BookshelfPosition");
					this.OnBookshelfPositionChanged();
				}
			}
		}
		
		[Column(Storage="_BookshelfNotes", DbType="NVarChar(50)")]
		public string BookshelfNotes
		{
			get
			{
				return this._BookshelfNotes;
			}
			set
			{
				if ((this._BookshelfNotes != value))
				{
					this.OnBookshelfNotesChanging(value);
					this.SendPropertyChanging();
					this._BookshelfNotes = value;
					this.SendPropertyChanged("BookshelfNotes");
					this.OnBookshelfNotesChanged();
				}
			}
		}
		
		[Association(Name="Book_Bookshelf", Storage="_Book", ThisKey="BookshelfName", OtherKey="BookshelfName", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Bookshelf.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Bookshelf.Add(this);
						this._BookshelfName = value.BookshelfName;
					}
					else
					{
						this._BookshelfName = default(string);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CD")]
	public partial class CD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CDID;
		
		private string _CDName;
		
		private string _CDType;
		
		private string _CDPosition;
		
		private EntitySet<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCDIDChanging(string value);
    partial void OnCDIDChanged();
    partial void OnCDNameChanging(string value);
    partial void OnCDNameChanged();
    partial void OnCDTypeChanging(string value);
    partial void OnCDTypeChanged();
    partial void OnCDPositionChanging(string value);
    partial void OnCDPositionChanged();
    #endregion
		
		public CD()
		{
			this._Book = new EntitySet<Book>(new Action<Book>(this.attach_Book), new Action<Book>(this.detach_Book));
			OnCreated();
		}
		
		[Column(Storage="_CDID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CDID
		{
			get
			{
				return this._CDID;
			}
			set
			{
				if ((this._CDID != value))
				{
					this.OnCDIDChanging(value);
					this.SendPropertyChanging();
					this._CDID = value;
					this.SendPropertyChanged("CDID");
					this.OnCDIDChanged();
				}
			}
		}
		
		[Column(Storage="_CDName", DbType="NVarChar(50)")]
		public string CDName
		{
			get
			{
				return this._CDName;
			}
			set
			{
				if ((this._CDName != value))
				{
					this.OnCDNameChanging(value);
					this.SendPropertyChanging();
					this._CDName = value;
					this.SendPropertyChanged("CDName");
					this.OnCDNameChanged();
				}
			}
		}
		
		[Column(Storage="_CDType", DbType="NChar(10)")]
		public string CDType
		{
			get
			{
				return this._CDType;
			}
			set
			{
				if ((this._CDType != value))
				{
					this.OnCDTypeChanging(value);
					this.SendPropertyChanging();
					this._CDType = value;
					this.SendPropertyChanged("CDType");
					this.OnCDTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CDPosition", DbType="NChar(10)")]
		public string CDPosition
		{
			get
			{
				return this._CDPosition;
			}
			set
			{
				if ((this._CDPosition != value))
				{
					this.OnCDPositionChanging(value);
					this.SendPropertyChanging();
					this._CDPosition = value;
					this.SendPropertyChanged("CDPosition");
					this.OnCDPositionChanged();
				}
			}
		}
		
		[Association(Name="CD_Book", Storage="_Book", ThisKey="CDID", OtherKey="CDID")]
		public EntitySet<Book> Book
		{
			get
			{
				return this._Book;
			}
			set
			{
				this._Book.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book(Book entity)
		{
			this.SendPropertyChanging();
			entity.CD = this;
		}
		
		private void detach_Book(Book entity)
		{
			this.SendPropertyChanging();
			entity.CD = null;
		}
	}
	
	[Table(Name="dbo.Handbook")]
	public partial class Handbook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HandbokID;
		
		private string _HandbookName;
		
		private string _HandbookPosition;
		
		private EntitySet<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHandbokIDChanging(string value);
    partial void OnHandbokIDChanged();
    partial void OnHandbookNameChanging(string value);
    partial void OnHandbookNameChanged();
    partial void OnHandbookPositionChanging(string value);
    partial void OnHandbookPositionChanged();
    #endregion
		
		public Handbook()
		{
			this._Book = new EntitySet<Book>(new Action<Book>(this.attach_Book), new Action<Book>(this.detach_Book));
			OnCreated();
		}
		
		[Column(Storage="_HandbokID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HandbokID
		{
			get
			{
				return this._HandbokID;
			}
			set
			{
				if ((this._HandbokID != value))
				{
					this.OnHandbokIDChanging(value);
					this.SendPropertyChanging();
					this._HandbokID = value;
					this.SendPropertyChanged("HandbokID");
					this.OnHandbokIDChanged();
				}
			}
		}
		
		[Column(Storage="_HandbookName", DbType="NVarChar(50)")]
		public string HandbookName
		{
			get
			{
				return this._HandbookName;
			}
			set
			{
				if ((this._HandbookName != value))
				{
					this.OnHandbookNameChanging(value);
					this.SendPropertyChanging();
					this._HandbookName = value;
					this.SendPropertyChanged("HandbookName");
					this.OnHandbookNameChanged();
				}
			}
		}
		
		[Column(Storage="_HandbookPosition", DbType="NChar(10)")]
		public string HandbookPosition
		{
			get
			{
				return this._HandbookPosition;
			}
			set
			{
				if ((this._HandbookPosition != value))
				{
					this.OnHandbookPositionChanging(value);
					this.SendPropertyChanging();
					this._HandbookPosition = value;
					this.SendPropertyChanged("HandbookPosition");
					this.OnHandbookPositionChanged();
				}
			}
		}
		
		[Association(Name="Handbook_Book", Storage="_Book", ThisKey="HandbokID", OtherKey="HandbookID")]
		public EntitySet<Book> Book
		{
			get
			{
				return this._Book;
			}
			set
			{
				this._Book.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book(Book entity)
		{
			this.SendPropertyChanging();
			entity.Handbook = this;
		}
		
		private void detach_Book(Book entity)
		{
			this.SendPropertyChanging();
			entity.Handbook = null;
		}
	}
	
	[Table(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _ISDN;
		
		private string _BookName;
		
		private string _Author;
		
		private string _Translator;
		
		private string _BookType;
		
		private string _PressName;
		
		private System.Nullable<int> _Pages;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<System.DateTime> _PubDate;
		
		private string _CDID;
		
		private string _HandbookID;
		
		private string _BookshelfName;
		
		private System.Nullable<int> _TotalNum;
		
		private System.Nullable<System.DateTime> _StorageDate;
		
		private EntitySet<Press> _Press;
		
		private EntitySet<BookType> _BookType1;
		
		private EntitySet<Bookshelf> _Bookshelf;
		
		private EntityRef<CD> _CD;
		
		private EntityRef<Handbook> _Handbook;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnISDNChanging(string value);
    partial void OnISDNChanged();
    partial void OnBookNameChanging(string value);
    partial void OnBookNameChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnTranslatorChanging(string value);
    partial void OnTranslatorChanged();
    partial void OnBookTypeChanging(string value);
    partial void OnBookTypeChanged();
    partial void OnPressNameChanging(string value);
    partial void OnPressNameChanged();
    partial void OnPagesChanging(System.Nullable<int> value);
    partial void OnPagesChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnPubDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPubDateChanged();
    partial void OnCDIDChanging(string value);
    partial void OnCDIDChanged();
    partial void OnHandbookIDChanging(string value);
    partial void OnHandbookIDChanged();
    partial void OnBookshelfNameChanging(string value);
    partial void OnBookshelfNameChanged();
    partial void OnTotalNumChanging(System.Nullable<int> value);
    partial void OnTotalNumChanged();
    partial void OnStorageDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStorageDateChanged();
    #endregion
		
		public Book()
		{
			this._Press = new EntitySet<Press>(new Action<Press>(this.attach_Press), new Action<Press>(this.detach_Press));
			this._BookType1 = new EntitySet<BookType>(new Action<BookType>(this.attach_BookType1), new Action<BookType>(this.detach_BookType1));
			this._Bookshelf = new EntitySet<Bookshelf>(new Action<Bookshelf>(this.attach_Bookshelf), new Action<Bookshelf>(this.detach_Bookshelf));
			this._CD = default(EntityRef<CD>);
			this._Handbook = default(EntityRef<Handbook>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ISDN", DbType="NVarChar(50)")]
		public string ISDN
		{
			get
			{
				return this._ISDN;
			}
			set
			{
				if ((this._ISDN != value))
				{
					this.OnISDNChanging(value);
					this.SendPropertyChanging();
					this._ISDN = value;
					this.SendPropertyChanged("ISDN");
					this.OnISDNChanged();
				}
			}
		}
		
		[Column(Storage="_BookName", DbType="NVarChar(50)")]
		public string BookName
		{
			get
			{
				return this._BookName;
			}
			set
			{
				if ((this._BookName != value))
				{
					this.OnBookNameChanging(value);
					this.SendPropertyChanging();
					this._BookName = value;
					this.SendPropertyChanged("BookName");
					this.OnBookNameChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(50)")]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Translator", DbType="NVarChar(50)")]
		public string Translator
		{
			get
			{
				return this._Translator;
			}
			set
			{
				if ((this._Translator != value))
				{
					this.OnTranslatorChanging(value);
					this.SendPropertyChanging();
					this._Translator = value;
					this.SendPropertyChanged("Translator");
					this.OnTranslatorChanged();
				}
			}
		}
		
		[Column(Storage="_BookType", DbType="NVarChar(50)")]
		public string BookType
		{
			get
			{
				return this._BookType;
			}
			set
			{
				if ((this._BookType != value))
				{
					this.OnBookTypeChanging(value);
					this.SendPropertyChanging();
					this._BookType = value;
					this.SendPropertyChanged("BookType");
					this.OnBookTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PressName", DbType="NVarChar(50)")]
		public string PressName
		{
			get
			{
				return this._PressName;
			}
			set
			{
				if ((this._PressName != value))
				{
					this.OnPressNameChanging(value);
					this.SendPropertyChanging();
					this._PressName = value;
					this.SendPropertyChanged("PressName");
					this.OnPressNameChanged();
				}
			}
		}
		
		[Column(Storage="_Pages", DbType="Int")]
		public System.Nullable<int> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_PubDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PubDate
		{
			get
			{
				return this._PubDate;
			}
			set
			{
				if ((this._PubDate != value))
				{
					this.OnPubDateChanging(value);
					this.SendPropertyChanging();
					this._PubDate = value;
					this.SendPropertyChanged("PubDate");
					this.OnPubDateChanged();
				}
			}
		}
		
		[Column(Storage="_CDID", DbType="NChar(10)")]
		public string CDID
		{
			get
			{
				return this._CDID;
			}
			set
			{
				if ((this._CDID != value))
				{
					if (this._CD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCDIDChanging(value);
					this.SendPropertyChanging();
					this._CDID = value;
					this.SendPropertyChanged("CDID");
					this.OnCDIDChanged();
				}
			}
		}
		
		[Column(Storage="_HandbookID", DbType="NChar(10)")]
		public string HandbookID
		{
			get
			{
				return this._HandbookID;
			}
			set
			{
				if ((this._HandbookID != value))
				{
					if (this._Handbook.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHandbookIDChanging(value);
					this.SendPropertyChanging();
					this._HandbookID = value;
					this.SendPropertyChanged("HandbookID");
					this.OnHandbookIDChanged();
				}
			}
		}
		
		[Column(Storage="_BookshelfName", DbType="NChar(10)")]
		public string BookshelfName
		{
			get
			{
				return this._BookshelfName;
			}
			set
			{
				if ((this._BookshelfName != value))
				{
					this.OnBookshelfNameChanging(value);
					this.SendPropertyChanging();
					this._BookshelfName = value;
					this.SendPropertyChanged("BookshelfName");
					this.OnBookshelfNameChanged();
				}
			}
		}
		
		[Column(Storage="_TotalNum", DbType="Int")]
		public System.Nullable<int> TotalNum
		{
			get
			{
				return this._TotalNum;
			}
			set
			{
				if ((this._TotalNum != value))
				{
					this.OnTotalNumChanging(value);
					this.SendPropertyChanging();
					this._TotalNum = value;
					this.SendPropertyChanged("TotalNum");
					this.OnTotalNumChanged();
				}
			}
		}
		
		[Column(Storage="_StorageDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StorageDate
		{
			get
			{
				return this._StorageDate;
			}
			set
			{
				if ((this._StorageDate != value))
				{
					this.OnStorageDateChanging(value);
					this.SendPropertyChanging();
					this._StorageDate = value;
					this.SendPropertyChanged("StorageDate");
					this.OnStorageDateChanged();
				}
			}
		}
		
		[Association(Name="Book_Press", Storage="_Press", ThisKey="PressName", OtherKey="PressName")]
		public EntitySet<Press> Press
		{
			get
			{
				return this._Press;
			}
			set
			{
				this._Press.Assign(value);
			}
		}
		
		[Association(Name="Book_BookType", Storage="_BookType1", ThisKey="BookType", OtherKey="BookTypeName")]
		public EntitySet<BookType> BookType1
		{
			get
			{
				return this._BookType1;
			}
			set
			{
				this._BookType1.Assign(value);
			}
		}
		
		[Association(Name="Book_Bookshelf", Storage="_Bookshelf", ThisKey="BookshelfName", OtherKey="BookshelfName")]
		public EntitySet<Bookshelf> Bookshelf
		{
			get
			{
				return this._Bookshelf;
			}
			set
			{
				this._Bookshelf.Assign(value);
			}
		}
		
		[Association(Name="CD_Book", Storage="_CD", ThisKey="CDID", OtherKey="CDID", IsForeignKey=true)]
		public CD CD
		{
			get
			{
				return this._CD.Entity;
			}
			set
			{
				CD previousValue = this._CD.Entity;
				if (((previousValue != value) 
							|| (this._CD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CD.Entity = null;
						previousValue.Book.Remove(this);
					}
					this._CD.Entity = value;
					if ((value != null))
					{
						value.Book.Add(this);
						this._CDID = value.CDID;
					}
					else
					{
						this._CDID = default(string);
					}
					this.SendPropertyChanged("CD");
				}
			}
		}
		
		[Association(Name="Handbook_Book", Storage="_Handbook", ThisKey="HandbookID", OtherKey="HandbokID", IsForeignKey=true)]
		public Handbook Handbook
		{
			get
			{
				return this._Handbook.Entity;
			}
			set
			{
				Handbook previousValue = this._Handbook.Entity;
				if (((previousValue != value) 
							|| (this._Handbook.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Handbook.Entity = null;
						previousValue.Book.Remove(this);
					}
					this._Handbook.Entity = value;
					if ((value != null))
					{
						value.Book.Add(this);
						this._HandbookID = value.HandbokID;
					}
					else
					{
						this._HandbookID = default(string);
					}
					this.SendPropertyChanged("Handbook");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Press(Press entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Press(Press entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_BookType1(BookType entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookType1(BookType entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Bookshelf(Bookshelf entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Bookshelf(Bookshelf entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[Table(Name="dbo.BookBorrow")]
	public partial class BookBorrow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BorrowID;
		
		private string _BookID;
		
		private string _UserID;
		
		private System.Nullable<System.DateTime> _BorrowDate;
		
		private System.Nullable<System.DateTime> _ReturnDate;
		
		private string _Operator;
		
		private string _BookName;
		
		private string _UserName;
		
		private string _Status;
		
		private string _Expired;
		
		private EntityRef<UserData> _UserData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBorrowIDChanging(int value);
    partial void OnBorrowIDChanged();
    partial void OnBookIDChanging(string value);
    partial void OnBookIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnBorrowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBorrowDateChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    partial void OnOperatorChanging(string value);
    partial void OnOperatorChanged();
    partial void OnBookNameChanging(string value);
    partial void OnBookNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnExpiredChanging(string value);
    partial void OnExpiredChanged();
    #endregion
		
		public BookBorrow()
		{
			this._UserData = default(EntityRef<UserData>);
			OnCreated();
		}
		
		[Column(Storage="_BorrowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BorrowID
		{
			get
			{
				return this._BorrowID;
			}
			set
			{
				if ((this._BorrowID != value))
				{
					this.OnBorrowIDChanging(value);
					this.SendPropertyChanging();
					this._BorrowID = value;
					this.SendPropertyChanged("BorrowID");
					this.OnBorrowIDChanged();
				}
			}
		}
		
		[Column(Storage="_BookID", DbType="NVarChar(50)")]
		public string BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="NVarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_BorrowDate", DbType="Date")]
		public System.Nullable<System.DateTime> BorrowDate
		{
			get
			{
				return this._BorrowDate;
			}
			set
			{
				if ((this._BorrowDate != value))
				{
					this.OnBorrowDateChanging(value);
					this.SendPropertyChanging();
					this._BorrowDate = value;
					this.SendPropertyChanged("BorrowDate");
					this.OnBorrowDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Operator", DbType="NVarChar(50)")]
		public string Operator
		{
			get
			{
				return this._Operator;
			}
			set
			{
				if ((this._Operator != value))
				{
					this.OnOperatorChanging(value);
					this.SendPropertyChanging();
					this._Operator = value;
					this.SendPropertyChanged("Operator");
					this.OnOperatorChanged();
				}
			}
		}
		
		[Column(Storage="_BookName", DbType="NVarChar(50)")]
		public string BookName
		{
			get
			{
				return this._BookName;
			}
			set
			{
				if ((this._BookName != value))
				{
					this.OnBookNameChanging(value);
					this.SendPropertyChanging();
					this._BookName = value;
					this.SendPropertyChanged("BookName");
					this.OnBookNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._UserData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Expired", DbType="NChar(10)")]
		public string Expired
		{
			get
			{
				return this._Expired;
			}
			set
			{
				if ((this._Expired != value))
				{
					this.OnExpiredChanging(value);
					this.SendPropertyChanging();
					this._Expired = value;
					this.SendPropertyChanged("Expired");
					this.OnExpiredChanged();
				}
			}
		}
		
		[Association(Name="UserData_BookBorrow", Storage="_UserData", ThisKey="UserID,UserName", OtherKey="UserID,UserName", IsForeignKey=true)]
		public UserData UserData
		{
			get
			{
				return this._UserData.Entity;
			}
			set
			{
				UserData previousValue = this._UserData.Entity;
				if (((previousValue != value) 
							|| (this._UserData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserData.Entity = null;
						previousValue.BookBorrow.Remove(this);
					}
					this._UserData.Entity = value;
					if ((value != null))
					{
						value.BookBorrow.Add(this);
						this._UserID = value.UserID;
						this._UserName = value.UserName;
					}
					else
					{
						this._UserID = default(string);
						this._UserName = default(string);
					}
					this.SendPropertyChanged("UserData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserFreeze")]
	public partial class UserFreeze : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReturnID;
		
		private string _UserID;
		
		private string _Operator;
		
		private string _Freeze;
		
		private System.Nullable<System.DateTime> _FreezeDate;
		
		private EntityRef<UserData> _UserData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReturnIDChanging(int value);
    partial void OnReturnIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnOperatorChanging(string value);
    partial void OnOperatorChanged();
    partial void OnFreezeChanging(string value);
    partial void OnFreezeChanged();
    partial void OnFreezeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFreezeDateChanged();
    #endregion
		
		public UserFreeze()
		{
			this._UserData = default(EntityRef<UserData>);
			OnCreated();
		}
		
		[Column(Storage="_ReturnID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReturnID
		{
			get
			{
				return this._ReturnID;
			}
			set
			{
				if ((this._ReturnID != value))
				{
					this.OnReturnIDChanging(value);
					this.SendPropertyChanging();
					this._ReturnID = value;
					this.SendPropertyChanged("ReturnID");
					this.OnReturnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="NVarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Operator", DbType="NVarChar(50)")]
		public string Operator
		{
			get
			{
				return this._Operator;
			}
			set
			{
				if ((this._Operator != value))
				{
					this.OnOperatorChanging(value);
					this.SendPropertyChanging();
					this._Operator = value;
					this.SendPropertyChanged("Operator");
					this.OnOperatorChanged();
				}
			}
		}
		
		[Column(Storage="_Freeze", DbType="NChar(10)")]
		public string Freeze
		{
			get
			{
				return this._Freeze;
			}
			set
			{
				if ((this._Freeze != value))
				{
					this.OnFreezeChanging(value);
					this.SendPropertyChanging();
					this._Freeze = value;
					this.SendPropertyChanged("Freeze");
					this.OnFreezeChanged();
				}
			}
		}
		
		[Column(Storage="_FreezeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FreezeDate
		{
			get
			{
				return this._FreezeDate;
			}
			set
			{
				if ((this._FreezeDate != value))
				{
					this.OnFreezeDateChanging(value);
					this.SendPropertyChanging();
					this._FreezeDate = value;
					this.SendPropertyChanged("FreezeDate");
					this.OnFreezeDateChanged();
				}
			}
		}
		
		[Association(Name="UserData_UserFreeze", Storage="_UserData", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserData UserData
		{
			get
			{
				return this._UserData.Entity;
			}
			set
			{
				UserData previousValue = this._UserData.Entity;
				if (((previousValue != value) 
							|| (this._UserData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserData.Entity = null;
						previousValue.UserFreeze.Remove(this);
					}
					this._UserData.Entity = value;
					if ((value != null))
					{
						value.UserFreeze.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("UserData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
